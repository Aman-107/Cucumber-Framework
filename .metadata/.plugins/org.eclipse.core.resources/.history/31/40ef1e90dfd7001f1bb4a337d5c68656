package stepDefination;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import POJO.AddPlace;
import POJO.Locations;
import Resources.TestDataBuild;
import Resources.Utils;
import Resources.WhenReources;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

public class stepDefinations extends Utils {
	
	RequestSpecification req;
	Response response;
	ResponseSpecification resspec;
	TestDataBuild data = new TestDataBuild();
	
	@Given("Add Place Payload with {string},{string},{string}")
	public void add_place_payload_with(String name, String language, String place) throws IOException {
		
		req = given()
		.spec(requestSpecification())
		.body(data.addPlacePayload(name,language,place));
	}
	
	@When("user calls {string} with {string} http request")
	public void user_calls_with_http_request(String apiName, String method) {
		resspec = new ResponseSpecBuilder().expectStatusCode(200)
				.expectContentType(ContentType.JSON).build();
	// contructor will be called with the value of resource which you have pass	
		WhenReources when = WhenReources.valueOf(apiName); // Enum
		System.out.println(when.getResource());
		
		if(method.equalsIgnoreCase("post")) {
		 response = req.when().post(when.getResource()); // passing enum extracted value
		}
		else if (method.equalsIgnoreCase("get")) {
			response = req.when().get(when.getResource());
		}
			
		.then()
		.spec(resspec).extract().response();
	}
	
	@Then("the API got success with status code {int}")
	public void the_api_got_success_with_status_code(Integer int1) {
	   
		assertEquals(response.getStatusCode(),200);
	}
	
	@Then("{string} in response body is {string}")
	public void in_response_body_is(String string, String string2) {
	   
	  String resp =  response.asString();
	  JsonPath js = new JsonPath(resp);
	  assertEquals(js.get(string).toString(),string2);
	}
	
}


/* If there is any issue while running the code make sure to delete 'JUNIT 4' from 'classpath'.
 * 
 */
